
@{
    ViewBag.Title = "Line Boundaries Chart";
}
<div class="row">
    <div class="col-12 chart-container">
        <div class="content"><canvas id="chart-0"></canvas></div>
        <div class="content"><canvas id="chart-1"></canvas></div>
        <div class="content"><canvas id="chart-2"></canvas></div>
        <div class="content"><canvas id="chart-3"></canvas></div>
    </div>
</div>
<div class="row">
    <div class="col-12 chart-btn-container">
        <div class="toolbar">
            <button onclick="toggleSmooth(this)" class="btn btn-default" style="background-color: hsl(350, 100%, 88%);">Smooth</button>
            <button onclick="randomize(this)" class="btn btn-default" style="background-color: hsl(350, 100%, 88%);">Randomize</button>
        </div>
    </div>
</div>

<script>
    var presets = window.chartColors;
    var utils = Samples.utils;
    var inputs = {
        min: -100,
        max: 100,
        count: 8,
        decimals: 2,
        continuity: 1
    };

    function generateData(config) {
        return utils.numbers(Chart.helpers.merge(inputs, config || {}));
    }

    function generateLabels(config) {
        return utils.months(Chart.helpers.merge({
            count: inputs.count,
            section: 3
        }, config || {}));
    }

    var options = {
        maintainAspectRatio: false,
        spanGaps: false,
        elements: {
            line: {
                tension: 0.000001
            }
        },
        plugins: {
            filler: {
                propagate: false
            }
        },
        scales: {
            x: {
                ticks: {
                    autoSkip: false,
                    maxRotation: 0
                }
            }
        }
    };

    [false, 'origin', 'start', 'end'].forEach(function(boundary, index) {

        // reset the random seed to generate the same data for all charts
        utils.srand(8);

        new Chart('chart-' + index, {
            type: 'line',
            data: {
                labels: generateLabels(),
                datasets: [{
                    backgroundColor: utils.transparentize(presets.red),
                    borderColor: presets.red,
                    data: generateData(),
                    label: 'Dataset',
                    fill: boundary
                }]
            },
            options: Chart.helpers.merge(options, {
                title: {
                    text: 'fill: ' + boundary,
                    display: true
                }
            })
        });
    });

    // eslint-disable-next-line no-unused-vars
    function toggleSmooth(btn) {
        var value = btn.classList.toggle('btn-on');
        Chart.helpers.each(Chart.instances, function(chart) {
            chart.options.elements.line.tension = value ? 0.4 : 0.000001;
            chart.update();
        });
    }

    // eslint-disable-next-line no-unused-vars
    function randomize() {
        var seed = utils.rand();
        Chart.helpers.each(Chart.instances, function(chart) {
            utils.srand(seed);

            chart.data.datasets.forEach(function(dataset) {
                dataset.data = generateData();
            });

            chart.update();
        });
    }
</script>